
<!DOCTYPE html>
<html lang="en">
	<head>
		<title>Demo - Web Viewer (MSA)</title>
		<meta charset="utf-8">
		<meta name="viewport" content="width=device-width, user-scalable=no, minimum-scale=1.0, maximum-scale=1.0">
		<style>
			body {
				font-family: Monospace;
				background-color: #000000;
				margin: 0px;
				overflow: hidden;
			}

			#info {
				color: #fff;
				position: absolute;
				top: 10px;
				width: 100%;
				text-align: center;
				z-index: 100;
				display:block;

			}

			a { color: skyblue }
			.button { background:#999; color:#eee; padding:0.2em 0.5em; cursor:pointer }
			.highlight { background:orange; color:#fff; }

			span {
				display: inline-block;
				width: 60px;
				float: left;
				text-align: center;
			}

		</style>
	</head>
	<body>
		<div id="info">
			<a href="mailto:msamy.earth@gmail.com" target="_blank">About</a>
		</div>

	  <script src="js/three.min.js"></script>
	  <script src="js/Detector.js"></script>
	  <script src="js/libs/stats.min.js"></script>
	  <script src="js/loaders/STLLoader.js"></script>
	  <script src="js/loaders/PLYLoader.js"></script>
	  <script src="js/controls/TransformControls.js"></script>
	  <script src="js/controls/TrackballControls.js"></script>	

		<script>

			if ( ! Detector.webgl ) Detector.addGetWebGLMessage();

			var container, stats;
			var camera, raycaster, scene, renderer, control;
			var mesh1, mesh2;
			var mouse = new THREE.Vector2(), INTERSECTED;
			
			init();
			animate();

			function init() {
				// graphics container
				container = document.createElement( 'div' );
				document.body.appendChild( container );
				// stats
				stats = new Stats();
				stats.domElement.style.position = 'absolute';
				stats.domElement.style.top = '0px';
				container.appendChild( stats.domElement );
				// camera
				camera = new THREE.PerspectiveCamera( 50, window.innerWidth / window.innerHeight, 1, 1500 );
				camera.position.set( 0, 200, 500 );
				camera.rotation.x = -0.3;
				// scene
				scene = new THREE.Scene();
				// Ground
				scene.add( new THREE.GridHelper( 500, 5 ) );
				/*
				var plane = new THREE.Mesh(
					new THREE.PlaneBufferGeometry( 40, 40 ),
					new THREE.MeshPhongMaterial( { color: 0x999999, specular: 0x101010 } )
				);
				plane.rotation.x = -Math.PI/2;
				plane.position.y = -0.5;
				scene.add( plane );
				*/
				var stlLoader = new THREE.STLLoader();
				var plyLoader = new THREE.PLYLoader();
				//var material = new THREE.MeshPhongMaterial( { color: 0xFFFFFF, specular: 0x999999, shininess: 200 } );
				var material = new THREE.MeshLambertMaterial( { color: 0xffffff } );
				
				plyLoader.load( 'orders/demo-s.ply', function ( geometry ) {
					var mesh = new THREE.Mesh( geometry, material );
					mesh.position.set( -100, 0, 0 );
					mesh.rotation.set( - Math.PI/2 , 0, 0 );
					//mesh.scale.set( 0.005, 0.005, 0.005 );
					mesh1 = mesh;
					scene.add( mesh );
				} );

				stlLoader.load( 'orders/demo-s.stl', function ( geometry ) {
					var mesh = new THREE.Mesh( geometry, material );
					mesh.position.set( +100, 0, 0 );
					mesh.rotation.set( - Math.PI/2 , 0, 0 );
					//mesh.scale.set( 0.005, 0.005, 0.005 );
					mesh2 = mesh;
					scene.add( mesh );
				} );
				// Lights
				//var ambientLight = new THREE.AmbientLight( 0x606060 );
				//scene.add( ambientLight );
				scene.add( new THREE.HemisphereLight( 0xFFFFFF, 0xBBBBBB ) );
				// renderer
				renderer = new THREE.WebGLRenderer( { antialias: true } );
				renderer.setClearColor( 0x9F9F9F );
				renderer.setPixelRatio( window.devicePixelRatio );
				renderer.setSize( window.innerWidth, window.innerHeight );
				// control
				control = new THREE.TransformControls( camera, renderer.domElement );
				control.addEventListener( 'change', render );
				scene.add( control );
				// raycaster
				raycaster = new THREE.Raycaster();

				container.appendChild( renderer.domElement );
				window.addEventListener( 'resize', onWindowResize, false );
				container.addEventListener( 'mousedown', onMouseDown , false);
				window.addEventListener( 'keydown', function ( event ) {
					switch ( event.keyCode ) {

						case 81: // Q
							control.setSpace( control.space === "local" ? "world" : "local" );
							break;

						case 17: // Ctrl
							control.setTranslationSnap( 100 );
							control.setRotationSnap( THREE.Math.degToRad( 15 ) );
							break;

						case 87: // W
							control.setMode( "translate" );
							break;

						case 69: // E
							control.setMode( "rotate" );
							break;

						case 49: // 1
							control.attach( mesh1 );
							break;
						case 50: // 2
							control.attach( mesh2 );
							break;

						case 82: // R
							control.setMode( "scale" );
							break;

						case 187:
						case 107: // +, =, num+
							control.setSize( control.size + 0.1 );
							break;

						case 189:
						case 109: // -, _, num-
							control.setSize( Math.max( control.size - 0.1, 0.1 ) );
							break;
					}
				});

				window.addEventListener( 'keyup', function ( event ) {
					switch ( event.keyCode ) {
						case 17: // Ctrl
							control.setTranslationSnap( null );
							control.setRotationSnap( null );
							break;
					}
				});

			}

			function onMouseDown(event){
				event.preventDefault();

				mouse.x = ( event.clientX / window.innerWidth ) * 2 - 1;
				mouse.y = - ( event.clientY / window.innerHeight ) * 2 + 1;

				// find intersections
				raycaster.setFromCamera( mouse, camera );
				var intersects = raycaster.intersectObjects( scene.children );
				console.log(intersects);
				if ( intersects.length > 0 ) {
					control.attach( intersects[0].object );
					/*if ( INTERSECTED != intersects[ 0 ].object ) {

						if ( INTERSECTED ) INTERSECTED.material.emissive.setHex( INTERSECTED.currentHex );

						INTERSECTED = intersects[ 0 ].object;
						INTERSECTED.currentHex = INTERSECTED.material.emissive.getHex();
						INTERSECTED.material.emissive.setHex( 0xff0000 );
					}*/
				} else {
					//if ( INTERSECTED ) INTERSECTED.material.emissive.setHex( INTERSECTED.currentHex );
					//INTERSECTED = null;
					control.unattach();
				}

			}

			function onWindowResize() {
				camera.aspect = window.innerWidth / window.innerHeight;
				camera.updateProjectionMatrix();

				renderer.setSize( window.innerWidth, window.innerHeight );

				render();
			}

			function animate() {
				requestAnimationFrame( animate );
				render();
				stats.update();
			}

			function render() {
				control.update();
				renderer.render( scene, camera );
			}

		</script>
	</body>
</html>
